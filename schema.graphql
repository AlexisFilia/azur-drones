# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Person {
  id: ID!
  firstName: String
  lastName: String
  soldActions(
    where: UseActionWhereInput! = {}
    orderBy: [UseActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UseAction!]
  soldActionsCount(where: UseActionWhereInput! = {}): Int
  pilotActions(
    where: UseActionWhereInput! = {}
    orderBy: [UseActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UseAction!]
  pilotActionsCount(where: UseActionWhereInput! = {}): Int
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  soldActions: UseActionManyRelationFilter
  pilotActions: UseActionManyRelationFilter
}

input UseActionManyRelationFilter {
  every: UseActionWhereInput
  some: UseActionWhereInput
  none: UseActionWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
}

input PersonUpdateInput {
  firstName: String
  lastName: String
  soldActions: UseActionRelateToManyForUpdateInput
  pilotActions: UseActionRelateToManyForUpdateInput
}

input UseActionRelateToManyForUpdateInput {
  disconnect: [UseActionWhereUniqueInput!]
  set: [UseActionWhereUniqueInput!]
  create: [UseActionCreateInput!]
  connect: [UseActionWhereUniqueInput!]
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  firstName: String
  lastName: String
  soldActions: UseActionRelateToManyForCreateInput
  pilotActions: UseActionRelateToManyForCreateInput
}

input UseActionRelateToManyForCreateInput {
  create: [UseActionCreateInput!]
  connect: [UseActionWhereUniqueInput!]
}

type Organization {
  id: ID!
  name: String
  website: String
  requestedInterventions(
    where: UseActionWhereInput! = {}
    orderBy: [UseActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UseAction!]
  requestedInterventionsCount(where: UseActionWhereInput! = {}): Int
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  name: StringFilter
  website: StringFilter
  requestedInterventions: UseActionManyRelationFilter
}

input OrganizationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  website: OrderDirection
}

input OrganizationUpdateInput {
  name: String
  website: String
  requestedInterventions: UseActionRelateToManyForUpdateInput
}

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  name: String
  website: String
  requestedInterventions: UseActionRelateToManyForCreateInput
}

type ProductModel {
  id: ID!
  name: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input ProductModelWhereUniqueInput {
  id: ID
}

input ProductModelWhereInput {
  AND: [ProductModelWhereInput!]
  OR: [ProductModelWhereInput!]
  NOT: [ProductModelWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProductModelUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductModelUpdateArgs {
  where: ProductModelWhereUniqueInput!
  data: ProductModelUpdateInput!
}

input ProductModelCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  productModel: ProductModel
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  productModel: ProductModelWhereInput
  articles: ArticleManyRelationFilter
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProductUpdateInput {
  name: String
  productModel: ProductModelRelateToOneForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
}

input ProductModelRelateToOneForUpdateInput {
  create: ProductModelCreateInput
  connect: ProductModelWhereUniqueInput
  disconnect: Boolean
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  productModel: ProductModelRelateToOneForCreateInput
  articles: ArticleRelateToManyForCreateInput
}

input ProductModelRelateToOneForCreateInput {
  create: ProductModelCreateInput
  connect: ProductModelWhereUniqueInput
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

type Article {
  id: ID!
  sku: String
  product: Product
  useActions(
    where: UseActionWhereInput! = {}
    orderBy: [UseActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UseAction!]
  useActionsCount(where: UseActionWhereInput! = {}): Int
}

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  sku: StringFilter
  product: ProductWhereInput
  useActions: UseActionManyRelationFilter
}

input ArticleOrderByInput {
  id: OrderDirection
  sku: OrderDirection
}

input ArticleUpdateInput {
  sku: String
  product: ProductRelateToOneForUpdateInput
  useActions: UseActionRelateToManyForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  sku: String
  product: ProductRelateToOneForCreateInput
  useActions: UseActionRelateToManyForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type UseAction {
  id: ID!
  status: String
  description: String
  takeOffTime: DateTime
  duration: Int
  commercials(
    where: PersonWhereInput! = {}
    orderBy: [PersonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Person!]
  commercialsCount(where: PersonWhereInput! = {}): Int
  pilots(
    where: PersonWhereInput! = {}
    orderBy: [PersonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Person!]
  pilotsCount(where: PersonWhereInput! = {}): Int
  article: Article
  report: Report
  client: Organization
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UseActionWhereUniqueInput {
  id: ID
}

input UseActionWhereInput {
  AND: [UseActionWhereInput!]
  OR: [UseActionWhereInput!]
  NOT: [UseActionWhereInput!]
  id: IDFilter
  status: StringFilter
  description: StringFilter
  takeOffTime: DateTimeNullableFilter
  duration: IntNullableFilter
  commercials: PersonManyRelationFilter
  pilots: PersonManyRelationFilter
  article: ArticleWhereInput
  report: ReportWhereInput
  client: OrganizationWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PersonManyRelationFilter {
  every: PersonWhereInput
  some: PersonWhereInput
  none: PersonWhereInput
}

input UseActionOrderByInput {
  id: OrderDirection
  status: OrderDirection
  description: OrderDirection
  takeOffTime: OrderDirection
  duration: OrderDirection
}

input UseActionUpdateInput {
  status: String
  description: String
  takeOffTime: DateTime
  duration: Int
  commercials: PersonRelateToManyForUpdateInput
  pilots: PersonRelateToManyForUpdateInput
  article: ArticleRelateToOneForUpdateInput
  report: ReportRelateToOneForUpdateInput
  client: OrganizationRelateToOneForUpdateInput
}

input PersonRelateToManyForUpdateInput {
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

input ArticleRelateToOneForUpdateInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
  disconnect: Boolean
}

input ReportRelateToOneForUpdateInput {
  create: ReportCreateInput
  connect: ReportWhereUniqueInput
  disconnect: Boolean
}

input OrganizationRelateToOneForUpdateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
}

input UseActionUpdateArgs {
  where: UseActionWhereUniqueInput!
  data: UseActionUpdateInput!
}

input UseActionCreateInput {
  status: String
  description: String
  takeOffTime: DateTime
  duration: Int
  commercials: PersonRelateToManyForCreateInput
  pilots: PersonRelateToManyForCreateInput
  article: ArticleRelateToOneForCreateInput
  report: ReportRelateToOneForCreateInput
  client: OrganizationRelateToOneForCreateInput
}

input PersonRelateToManyForCreateInput {
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

input ArticleRelateToOneForCreateInput {
  create: ArticleCreateInput
  connect: ArticleWhereUniqueInput
}

input ReportRelateToOneForCreateInput {
  create: ReportCreateInput
  connect: ReportWhereUniqueInput
}

input OrganizationRelateToOneForCreateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

type Report {
  id: ID!
  status: String
  title: String
  criticity: String
  description: String
  useAction: UseAction
}

input ReportWhereUniqueInput {
  id: ID
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  NOT: [ReportWhereInput!]
  id: IDFilter
  status: StringFilter
  title: StringFilter
  criticity: StringFilter
  description: StringFilter
  useAction: UseActionWhereInput
}

input ReportOrderByInput {
  id: OrderDirection
  status: OrderDirection
  title: OrderDirection
  criticity: OrderDirection
  description: OrderDirection
}

input ReportUpdateInput {
  status: String
  title: String
  criticity: String
  description: String
  useAction: UseActionRelateToOneForUpdateInput
}

input UseActionRelateToOneForUpdateInput {
  create: UseActionCreateInput
  connect: UseActionWhereUniqueInput
  disconnect: Boolean
}

input ReportUpdateArgs {
  where: ReportWhereUniqueInput!
  data: ReportUpdateInput!
}

input ReportCreateInput {
  status: String
  title: String
  criticity: String
  description: String
  useAction: UseActionRelateToOneForCreateInput
}

input UseActionRelateToOneForCreateInput {
  create: UseActionCreateInput
  connect: UseActionWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(
    where: OrganizationWhereUniqueInput!
    data: OrganizationUpdateInput!
  ): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
  createProductModel(data: ProductModelCreateInput!): ProductModel
  createProductModels(data: [ProductModelCreateInput!]!): [ProductModel]
  updateProductModel(
    where: ProductModelWhereUniqueInput!
    data: ProductModelUpdateInput!
  ): ProductModel
  updateProductModels(data: [ProductModelUpdateArgs!]!): [ProductModel]
  deleteProductModel(where: ProductModelWhereUniqueInput!): ProductModel
  deleteProductModels(where: [ProductModelWhereUniqueInput!]!): [ProductModel]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(
    where: ArticleWhereUniqueInput!
    data: ArticleUpdateInput!
  ): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createUseAction(data: UseActionCreateInput!): UseAction
  createUseActions(data: [UseActionCreateInput!]!): [UseAction]
  updateUseAction(
    where: UseActionWhereUniqueInput!
    data: UseActionUpdateInput!
  ): UseAction
  updateUseActions(data: [UseActionUpdateArgs!]!): [UseAction]
  deleteUseAction(where: UseActionWhereUniqueInput!): UseAction
  deleteUseActions(where: [UseActionWhereUniqueInput!]!): [UseAction]
  createReport(data: ReportCreateInput!): Report
  createReports(data: [ReportCreateInput!]!): [Report]
  updateReport(where: ReportWhereUniqueInput!, data: ReportUpdateInput!): Report
  updateReports(data: [ReportUpdateArgs!]!): [Report]
  deleteReport(where: ReportWhereUniqueInput!): Report
  deleteReports(where: [ReportWhereUniqueInput!]!): [Report]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  people(
    where: PersonWhereInput! = {}
    orderBy: [PersonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  organizations(
    where: OrganizationWhereInput! = {}
    orderBy: [OrganizationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Organization!]
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  productModels(
    where: ProductModelWhereInput! = {}
    orderBy: [ProductModelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductModel!]
  productModel(where: ProductModelWhereUniqueInput!): ProductModel
  productModelsCount(where: ProductModelWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  useActions(
    where: UseActionWhereInput! = {}
    orderBy: [UseActionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UseAction!]
  useAction(where: UseActionWhereUniqueInput!): UseAction
  useActionsCount(where: UseActionWhereInput! = {}): Int
  reports(
    where: ReportWhereInput! = {}
    orderBy: [ReportOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Report!]
  report(where: ReportWhereUniqueInput!): Report
  reportsCount(where: ReportWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
